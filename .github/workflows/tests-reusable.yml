name: tests-reusable

on:
  workflow_call:
    inputs:
      lockfile:
        description: "The lockfile to use"
        required: false
        default: "conda-lock.yml"
        type: string
      lockfile-is-artifact:
        description: "Whether the lockfile is an artifact"
        required: false
        default: false
        type: boolean
    secrets:
      CODECOV_TOKEN:
        required: true

env:
  PY_COLORS: "1"
  IMAGE_NAME: conda-forge-tick

jobs:
  tests:
    name: tests
    runs-on: "ubuntu-latest"
    permissions:
      actions: write  # for deleting cache entries
      contents: read
    strategy:
      # continue running the tests even if one of the groups fails
      fail-fast: false
      matrix:
        # if change the number of groups here, also change it next to --splits below
        group: [1, 2]
    defaults:
      run:
        shell: bash -leo pipefail {0}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          repository: "regro/cf-scripts"

      - name: prep the lockfile
        if:  ${{ !inputs.lockfile-is-artifact }}
        run: |
          mkdir input-lockfile
          mv conda-lock.yml input-lockfile/${{ inputs.lockfile }}

      - name: download lockfile if it is an artifact
        if: ${{ inputs.lockfile-is-artifact }}
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          name: ${{ inputs.lockfile }}
          path: input-lockfile

      - name: move lockfile to repo
        run: |
          mv input-lockfile/${{ inputs.lockfile }} conda-lock.yml
          rm -rf input-lockfile

      - uses: mamba-org/setup-micromamba@06375d89d211a1232ef63355742e9e2e564bc7f7 # v1
        with:
          environment-file: conda-lock.yml
          environment-name: cf-scripts
          condarc-file: autotick-bot/condarc

      - name: configure conda and install code
        run: |
          pip install --no-deps --no-build-isolation -e .

      - name: Set up git
        run: |
          git config --global user.name regro-cf-autotick-bot
          git config --global user.email 36490558+regro-cf-autotick-bot@users.noreply.github.com
          git config --global pull.rebase false

      - name: test versions
        run: |
          cd ..
          python -c "import conda_forge_tick; assert conda_forge_tick.__version__ != '0.0.0'"
          cd -

          pip uninstall conda-forge-tick --yes
          rm -rf dist/*
          python -m build --sdist . --outdir dist
          pip install --no-deps --no-build-isolation dist/*.tar.gz
          cd ..
          python -c "import conda_forge_tick; assert conda_forge_tick.__version__ != '0.0.0'"
          cd -
          pip uninstall conda-forge-tick --yes

          python -m pip install -v --no-deps --no-build-isolation -e .

      - name: start MongoDB
        uses: MongoCamp/mongodb-github-action@e76ad215d47c31a99b4b0b1fde05f6cd1185df1a # e76ad215d47c31a99b4b0b1fde05f6cd1185df1a
        with:
          mongodb-version: "latest"

      - name: test mongodb is OK
        run: |
          python -c "from pymongo import MongoClient; import os; print(MongoClient(os.environ['MONGODB_CONNECTION_STRING']))"
        env:
          MONGODB_CONNECTION_STRING: "mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000"

      - name: set up docker buildx
        uses: docker/setup-buildx-action@v3

      - name: build docker image
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v6
        with:
          context: .
          push: false
          load: true
          tags: ${{ env.IMAGE_NAME }}:test

      - name: restore test durations
        uses: actions/cache/restore@6849a6489940f00c2f30c0fb92c6274307ccb58a  # v4
        with:
          path: .test_durations
          key: test-durations-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            test-durations-${{ github.ref }}-
            test-durations-

      - name: run pytest
        run: |
          export TEST_BOT_TOKEN_VAL=unpassword
          export BOT_TOKEN=${TEST_BOT_TOKEN_VAL}
          # note: we do not use pytest-xdist (-n auto) here for now because they interfere with hiding the
          # MONGODB_CONNECTION_STRING sensitive environment variable
          if [[ -f .test_durations ]]; then
            cp .test_durations .test_durations.${{ matrix.group }}
          fi
          pytest \
            -v \
            --splits 2 --group ${{ matrix.group }} \
            --store-durations \
            --durations-path=.test_durations.${{ matrix.group }} \
            --splitting-algorithm least_duration \
            --clean-durations \
            --cov=conda_forge_tick \
            --cov=tests \
            --cov-config=.coveragerc \
            --cov-report=term-missing \
            --cov-report=xml \
            --durations=10 \
            --ignore=tests/model \
            tests
        env:
          MONGODB_CONNECTION_STRING: "mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000"
          RUN_URL: ""

      - name: upload test durations
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4
        with:
          name: test-durations-${{ matrix.group }}
          path: .test_durations.${{ matrix.group }}
          include-hidden-files: true

      - name: upload coverage
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4
        with:
          name: coverage-${{ matrix.group }}
          path: .coverage
          include-hidden-files: true

  test-coverage-and-durations:
    name: test-coverage-and-durations
    needs: tests
    runs-on: "ubuntu-latest"
    defaults:
      run:
        shell: bash -leo pipefail {0}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          repository: "regro/cf-scripts"

      - name: prep the lockfile
        if:  ${{ !inputs.lockfile-is-artifact }}
        run: |
          mkdir input-lockfile
          mv conda-lock.yml input-lockfile/${{ inputs.lockfile }}

      - name: download lockfile if it is an artifact
        if: ${{ inputs.lockfile-is-artifact }}
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          name: ${{ inputs.lockfile }}
          path: input-lockfile

      - name: move lockfile to repo
        run: |
          mv input-lockfile/${{ inputs.lockfile }} conda-lock.yml
          rm -rf input-lockfile

      - uses: mamba-org/setup-micromamba@06375d89d211a1232ef63355742e9e2e564bc7f7 # v1
        with:
          environment-file: conda-lock.yml
          environment-name: cf-scripts
          condarc-file: autotick-bot/condarc

      - name: download coverage artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          pattern: coverage-*

      - name: combine coverage
        run: |
          coverage combine coverage-*/.coverage*
          coverage xml

      - name: upload codecov
        uses: codecov/codecov-action@015f24e6818733317a2da2edd6290ab26238649a # v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: cache test durations
        uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a  # v4
        with:
          path: .test_durations
          key: test-durations-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            test-durations-${{ github.ref }}-
            test-durations-

      - name: download test duration artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          pattern: test-durations-*

      - name: combine test durations
        run: |
          jq '. + input' test-durations-*/.test_durations.* > .test_durations

      - name: upload test durations
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4
        with:
          name: test-durations
          path: .test_durations
          include-hidden-files: true
