{% set version = "1.7.3" %}
# see github.com/conda-forge/conda-forge.github.io/issues/1059 for naming discussion
{% set faiss_proc_type = "cuda" if cuda_compiler_version != "None" else "cpu" %}

# headers for upstream-folders 'faiss/*.h', 'faiss/{impl,invlists,utils}/*.h',
# see https://github.com/facebookresearch/faiss/blob/v{{ version }}/faiss/CMakeLists.txt;
# gpu adds headers in 'faiss/gpu/*.h', 'faiss/gpu/{impl,utils}/*.(cu)?h'.
# generated by:
# ls faiss/{.,impl,invlists,utils} | grep -E "h$"
# ls faiss/gpu/{.,impl,impl/scan,utils,utils/blockselect,utils/warpselect} | grep -E "h$"
{% set headers = [
    'AutoTune.h', 'Clustering.h', 'IVFlib.h', 'Index.h', 'Index2Layer.h',
    'IndexAdditiveQuantizer.h', 'IndexBinary.h', 'IndexBinaryFlat.h', 'IndexBinaryFromFloat.h',
    'IndexBinaryHNSW.h', 'IndexBinaryHash.h', 'IndexBinaryIVF.h', 'IndexFlat.h',
    'IndexFlatCodes.h', 'IndexHNSW.h', 'IndexIVF.h', 'IndexIVFAdditiveQuantizer.h',
    'IndexIVFFlat.h', 'IndexIVFPQ.h', 'IndexIVFPQFastScan.h', 'IndexIVFPQR.h',
    'IndexIVFSpectralHash.h', 'IndexLSH.h', 'IndexLattice.h', 'IndexNNDescent.h', 'IndexNSG.h',
    'IndexPQ.h', 'IndexPQFastScan.h', 'IndexPreTransform.h', 'IndexRefine.h', 'IndexReplicas.h',
    'IndexScalarQuantizer.h', 'IndexShards.h', 'MatrixStats.h', 'MetaIndexes.h', 'MetricType.h',
    'VectorTransform.h', 'clone_index.h', 'index_factory.h', 'index_io.h',
    'impl/AdditiveQuantizer.h', 'impl/AuxIndexStructures.h', 'impl/FaissAssert.h',
    'impl/FaissException.h', 'impl/HNSW.h', 'impl/LocalSearchQuantizer.h', 'impl/NNDescent.h',
    'impl/NSG.h', 'impl/PolysemousTraining.h', 'impl/ProductQuantizer-inl.h',
    'impl/ProductQuantizer.h', 'impl/ResidualQuantizer.h', 'impl/ResultHandler.h',
    'impl/ScalarQuantizer.h', 'impl/ThreadedIndex-inl.h', 'impl/ThreadedIndex.h', 'impl/io.h',
    'impl/io_macros.h', 'impl/kmeans1d.h', 'impl/lattice_Zn.h', 'impl/platform_macros.h',
    'impl/pq4_fast_scan.h', 'impl/simd_result_handlers.h',
    'invlists/BlockInvertedLists.h', 'invlists/DirectMap.h', 'invlists/InvertedLists.h',
    'invlists/InvertedListsIOHook.h',
    'utils/AlignedTable.h', 'utils/Heap.h', 'utils/WorkerThread.h', 'utils/distances.h',
    'utils/extra_distances-inl.h', 'utils/extra_distances.h', 'utils/hamming-inl.h',
    'utils/hamming.h', 'utils/ordered_key_value.h', 'utils/partitioning.h', 'utils/quantize_lut.h',
    'utils/random.h', 'utils/simdlib.h', 'utils/simdlib_avx2.h', 'utils/simdlib_emulated.h',
    'utils/simdlib_neon.h', 'utils/utils.h',
] + (not win) * [
    'invlists/OnDiskInvertedLists.h'
] + (cuda_compiler_version != "None") * [
    'gpu/GpuAutoTune.h', 'gpu/GpuCloner.h', 'gpu/GpuClonerOptions.h', 'gpu/GpuDistance.h',
    'gpu/GpuFaissAssert.h', 'gpu/GpuIcmEncoder.h', 'gpu/GpuIndex.h', 'gpu/GpuIndexBinaryFlat.h',
    'gpu/GpuIndexFlat.h', 'gpu/GpuIndexIVF.h', 'gpu/GpuIndexIVFFlat.h', 'gpu/GpuIndexIVFPQ.h',
    'gpu/GpuIndexIVFScalarQuantizer.h', 'gpu/GpuIndicesOptions.h', 'gpu/GpuResources.h',
    'gpu/StandardGpuResources.h',
    'gpu/impl/BinaryDistance.cuh', 'gpu/impl/BinaryFlatIndex.cuh', 'gpu/impl/BroadcastSum.cuh',
    'gpu/impl/Distance.cuh', 'gpu/impl/DistanceUtils.cuh', 'gpu/impl/FlatIndex.cuh',
    'gpu/impl/GeneralDistance.cuh', 'gpu/impl/GpuScalarQuantizer.cuh', 'gpu/impl/IVFAppend.cuh',
    'gpu/impl/IVFBase.cuh', 'gpu/impl/IVFFlat.cuh', 'gpu/impl/IVFFlatScan.cuh',
    'gpu/impl/IVFInterleaved.cuh', 'gpu/impl/IVFPQ.cuh', 'gpu/impl/IVFUtils.cuh',
    'gpu/impl/IcmEncoder.cuh', 'gpu/impl/InterleavedCodes.h', 'gpu/impl/L2Norm.cuh',
    'gpu/impl/L2Select.cuh', 'gpu/impl/PQCodeDistances-inl.cuh', 'gpu/impl/PQCodeDistances.cuh',
    'gpu/impl/PQCodeLoad.cuh', 'gpu/impl/PQScanMultiPassNoPrecomputed-inl.cuh',
    'gpu/impl/PQScanMultiPassNoPrecomputed.cuh', 'gpu/impl/PQScanMultiPassPrecomputed.cuh',
    'gpu/impl/RemapIndices.h', 'gpu/impl/VectorResidual.cuh',
    'gpu/impl/scan/IVFInterleavedImpl.cuh',
    'gpu/utils/BlockSelectKernel.cuh', 'gpu/utils/Comparators.cuh',
    'gpu/utils/ConversionOperators.cuh', 'gpu/utils/CopyUtils.cuh', 'gpu/utils/DeviceDefs.cuh',
    'gpu/utils/DeviceTensor-inl.cuh', 'gpu/utils/DeviceTensor.cuh', 'gpu/utils/DeviceUtils.h',
    'gpu/utils/DeviceVector.cuh', 'gpu/utils/Float16.cuh', 'gpu/utils/HostTensor-inl.cuh',
    'gpu/utils/HostTensor.cuh', 'gpu/utils/Limits.cuh', 'gpu/utils/LoadStoreOperators.cuh',
    'gpu/utils/MathOperators.cuh', 'gpu/utils/MatrixMult-inl.cuh', 'gpu/utils/MatrixMult.cuh',
    'gpu/utils/MergeNetworkBlock.cuh', 'gpu/utils/MergeNetworkUtils.cuh',
    'gpu/utils/MergeNetworkWarp.cuh', 'gpu/utils/NoTypeTensor.cuh', 'gpu/utils/Pair.cuh',
    'gpu/utils/PtxUtils.cuh', 'gpu/utils/ReductionOperators.cuh', 'gpu/utils/Reductions.cuh',
    'gpu/utils/Select.cuh', 'gpu/utils/StackDeviceMemory.h', 'gpu/utils/StaticUtils.h',
    'gpu/utils/Tensor-inl.cuh', 'gpu/utils/Tensor.cuh', 'gpu/utils/ThrustAllocator.cuh',
    'gpu/utils/Timer.h', 'gpu/utils/Transpose.cuh', 'gpu/utils/WarpPackedBits.cuh',
    'gpu/utils/WarpSelectKernel.cuh', 'gpu/utils/WarpShuffles.cuh',
    'gpu/utils/blockselect/BlockSelectImpl.cuh', 'gpu/utils/warpselect/WarpSelectImpl.cuh'
] %}

package:
  name: faiss-split
  version: {{ version }}

source:
  url: https://github.com/facebookresearch/faiss/archive/v{{ version }}.tar.gz
  sha256: dda1b031957789e6a6f3b37d48ad135b9557a33c5013c1c245ef4bced2d787de
  patches:
    - patches/0001-use-c-17.patch
    # downgrade to C++14 for CUDA 10.2...
    - patches/0001-use-c-14.patch  # [cuda_compiler_version == "10.2"]
    # ... resp. CUDA 11.1 on linux
    - patches/0001-use-c-14.patch  # [linux and (cuda_compiler_version == "11.1")]
    # adapt header target directory for faiss_avx2
    - patches/0002-adapt-header-target-directory-to-outputname.patch
    # patch for avoiding crash in GPU test suite on windows
    - patches/0003-skip-test_stress-for-GPU-on-windows.patch
    # enable building libfaiss_avx2 without libfaiss
    - patches/0004-enable-building-libfaiss_avx2-without-libfaiss.patch
    # increase tolerance for test that occasionally fails marginally
    - patches/0005-increase-tolerance-for-marginally-failing-test.patch
    # add /bigobj on windows to avoid: "fatal error C1128: number of sections exceeded object file format limit"
    - patches/0006-add-bigobj-to-swigfaiss-compile-options-on-windows.patch

build:
  number: 0
  skip: true  # [linux and cuda_compiler_version == "10.2"]
  # always crashes
  skip: true  # [win and cuda_compiler_version in ("11.0", "11.1")]

requirements:
  build:
    - {{ compiler('cxx') }}
    - make  # [linux]

outputs:
  # A meta-package to select CPU or GPU build for faiss.
  - name: faiss-proc
    version: 1.0.0
    build:
      string: {{ faiss_proc_type }}
    test:
      commands:
        - exit 0

  # build two separate C++ libs, one for generic x64, and one for AVX2
  {% for CF_FAISS_BUILD in ["avx2", "generic"] %}
  # order libfaiss last in loop due to conda/conda-build#4090; libfaiss-avx2
  # is only used for faiss and not important enough to work-around for this bug
  {% if CF_FAISS_BUILD == "generic" %}
  - name: libfaiss
  {% else %}
  - name: libfaiss-avx2
  {% endif %}
  {% set libext = "_avx2" if CF_FAISS_BUILD == "avx2" else "" %}
    # only one main build script build-lib.{bat|sh}, with the only difference
    # through CF_FAISS_BUILD={generic,avx2} that's set in the wrappers
    script: build-lib-{{ CF_FAISS_BUILD }}.sh  # [not win]
    script: build-lib-{{ CF_FAISS_BUILD }}.bat  # [win]
    build:
      string: "h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}_{{ faiss_proc_type }}"  # [cuda_compiler_version == "None"]
      string: "cuda{{ cuda_compiler_version|replace('.', '') }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}_{{ faiss_proc_type }}"  # [cuda_compiler_version != "None"]
      run_exports:
        # faiss follows SemVer, so restrict packages built with libfaiss to use
        # at least the same version at runtime, but below the next major version.
        - libfaiss{{ libext }} >={{ version }},<2
        # additionally, we need to ensure matching proc-type
        - libfaiss{{ libext }} =*=*_{{ faiss_proc_type }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}  # [cuda_compiler_version != "None"]
        - cmake
        - make                    # [linux]
        - libgomp                 # [linux]
        - llvm-openmp             # [osx]
      host:
        - libblas
        - liblapack
      run_constrained:
        - faiss-cpu ==9999999999  # [cuda_compiler_version != "None"]
        - faiss-gpu ==9999999999  # [cuda_compiler_version == "None"]
        - faiss-proc =*={{ faiss_proc_type }}

    test:
      commands:
        # shared
        - test -f $PREFIX/lib/libfaiss{{ libext }}.so               # [linux]
        - test -f $PREFIX/lib/libfaiss{{ libext }}.dylib            # [osx]
        - if not exist %LIBRARY_BIN%\faiss{{ libext }}.dll exit 1   # [win]
        # On windows, faiss.lib is an "import library";
        # Deleting it breaks the faiss-builds
        - if not exist %LIBRARY_LIB%\faiss{{ libext }}.lib exit 1   # [win]

        # absence of static libraries
        - test ! -f $PREFIX/lib/libfaiss{{ libext }}.a              # [not win]

        # headers
        {% for each_header in headers %}
        - test -f $PREFIX/include/faiss{{ libext }}/{{ each_header }} || (echo "{{ each_header }} not found" && exit 1)  # [unix]
        - if not exist %LIBRARY_INC%\faiss{{ libext }}\{{ "\\".join(each_header.split("/")) }} exit 1                    # [win]
        {% endfor %}
  {% endfor %}

  - name: faiss
    script: build-pkg.sh  # [not win]
    script: build-pkg.bat  # [win]
    build:
      string: "py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}_{{ faiss_proc_type }}"  # [cuda_compiler_version == "None"]
      string: "py{{ CONDA_PY }}cuda{{ cuda_compiler_version|replace('.', '') }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}_{{ faiss_proc_type }}"  # [cuda_compiler_version != "None"]
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}  # [cuda_compiler_version != "None"]
        - swig
        - cmake
        - make                    # [linux]
        - libgomp                 # [linux]
        - llvm-openmp             # [osx]
      host:
        - python
        - pip
        - numpy
        - libfaiss ={{ version }}=*_{{ faiss_proc_type }}
        - libfaiss-avx2 ={{ version }}=*_{{ faiss_proc_type }}
        - libblas
        - liblapack
      run:
        - python
        - libfaiss ={{ version }}=*_{{ faiss_proc_type }}
        - libfaiss-avx2 ={{ version }}=*_{{ faiss_proc_type }}
        - {{ pin_compatible('numpy') }}
      run_constrained:
        - faiss-cpu ==9999999999  # [cuda_compiler_version != "None"]
        - faiss-gpu ==9999999999  # [cuda_compiler_version == "None"]
        - faiss-proc =*={{ faiss_proc_type }}

    test:
      requires:
        # trying to test all blas-variants runs into conda/conda-build#3947
        # - libblas =*=*{{ blas_impl }}
        # testing with MKL, as upstream considers this the most important
        - libblas =*=*mkl
        - scipy
        - pytest
      files:
        - test-pkg.bat
        - test-pkg.sh
      source_files:
        - tests/
      imports:
        - faiss
      commands:
        # the linux & windows CI agents support AVX2 (OSX doesn't yet), so by default,
        # we expect faiss will load the library with AVX2-support, see
        # https://github.com/facebookresearch/faiss/blob/v1.7.1/faiss/python/loader.py#L52-L66
        - export HAS_AVX2=YES && ./test-pkg.sh  # [linux]
        - export HAS_AVX2=NO  && ./test-pkg.sh  # [osx]
        # skip test suite on win + cuda < 11.2 due to time outs (note: "None" >= "11.2")
        {% if cuda_compiler_version|string >= "11.2" %}
        - set "HAS_AVX2=YES"  && test-pkg.bat   # [win]
        {% endif %}

        # running the following test requires an actual GPU device, which is not available in CI
        # - pytest faiss/gpu/test/

  # for compatibility with (& ease of migration from) existing packages in the pytorch channel
  - name: faiss-cpu
    build:
      skip: true  # [cuda_compiler_version != "None"]
    requirements:
      run:
        - faiss ={{ version }}=*_cpu
    test:
      imports:
        - faiss

  - name: faiss-gpu
    build:
      skip: true  # [cuda_compiler_version == "None"]
    requirements:
      run:
        - faiss ={{ version }}=*_cuda
    test:
      imports:
        - faiss

about:
  home: https://github.com/facebookresearch/faiss
  license: MIT
  license_family: MIT
  license_file: LICENSE
  summary: 'A library for efficient similarity search and clustering of dense vectors.'

  description: |
    Faiss is a library for efficient similarity search and clustering of dense vectors.
    It contains algorithms that search in sets of vectors of any size, up to ones that
    possibly do not fit in RAM. It also contains supporting code for evaluation and
    parameter tuning. Faiss is written in C++ with complete wrappers for Python/numpy.
    Some of the most useful algorithms are implemented on the GPU. It is developed by
    [Facebook AI Research](https://research.fb.com/category/facebook-ai-research-fair/).

    For best performance, the maintainers of the package
    [recommend](https://github.com/conda-forge/staged-recipes/pull/11337#issuecomment-623718460)
    using the MKL implementation of blas/lapack. You can ensure that this is installed
    by adding "libblas =*=*mkl" to your dependencies.
  doc_url: https://rawgit.com/facebookresearch/faiss/master/docs/html/annotated.html
  dev_url: https://github.com/facebookresearch/faiss

extra:
  recipe-maintainers:
    - h-vetinari
